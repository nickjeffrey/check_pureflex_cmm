#!/usr/bin/perl -w
#



# DESCRIPTION
# -----------
#  This script is a nagios check that determines the health status of an IBM  / Lenovo Pureflex Chassis Management Module


# OUTSTANDING TASKS
# ----------------
# add a check for the number of installed compute nodes
# add a check for the status of the ethernet/fibre switches
# add a check for chassis internal temperature



# CHANGE LOG
# ----------
#  2016/07/01 	njeffrey 	Script created
#  2016/07/26 	njeffrey 	Add get_fan_speeds subroutine
#  2016/07/27 	njeffrey 	Add get_power_module_status subroutine
#  2016/07/27 	njeffrey 	Add get_cmm_firmware subroutine
#  2016/09/22 	njeffrey 	Tweak alerts to put more important items first
#  2021/05/12 	njeffrey 	Replace Net::SNMP perl module with snmpget/snmpwalk
#  2021/05/14 	njeffrey 	Add $snmp_parameters variable to hold flags for snmpget


# NOTES
# -----
#
#  This script should return one (and only one) line of ouput.  Multiple
#  lines of output are silently ignored by nagios.
#
#  The line of output will become the body of the alert message sent by nagios
#
#
#  You will need a section in the services.cfg
#  file on the nagios server that looks similar to the following.
#   define service{
#           use                             generic-24x7-service
#           host_name                       cmm1
#           service_description             Chassis health
#           check_command                   check_pureflex_cmm!public
#           }
#
#  You will need a section in the commands.cfg
#  file on the nagios server that looks similar to the following.
#     # ---------------------------------------------------------------------------
#     # 'check_pureflex_cmm' command definition
#     define command{
#             command_name    check_pureflex_cmm
#             command_line    $USER1$/check_pureflex_cmm -H $HOSTADDRESS$ -c $ARG1$
#             }
#
#
#


use strict;					#enforce good coding practices
use Getopt::Long;                       	#allow --long-switches to be used as parameters


# declare variables
my ($OK,$WARN,$CRITICAL,$UNKNOWN);
my ($CHECK_NAME,$host,$community,$community_default);
my ($cmm_health,$ambient_temp,$internal_temp,%fans,%powermodules);
my ($chassis_model,$chassis_serial,$cmm_firmware);
my ($pingstatus,$count,$key,$output_message);
my ($opt_c,$opt_h,$opt_v,$opt_H);
my ($verbose,$oid,$session,$error,$result);
my ($cmd,$snmpget,$snmpwalk,$snmp_parameters);
$community_default  = "public";			#use this value if user does not specify SNMP community string
$CHECK_NAME         = "Chassis health";
$verbose            = "no";			#yes/no flag for debugging
$snmpget            = "/usr/bin/snmpget";	#location of binary
$snmpwalk           = "/usr/bin/snmpwalk";	#location of binary


#
# Nagios return codes
#
$OK       = 0;
$WARN     = 1;
$CRITICAL = 2;
$UNKNOWN  = 3;





sub get_options {
   #
   # this gets the command line parameters provided by the users
   print "running get_options subroutine \n" if ($verbose eq "yes");
   #
   Getopt::Long::Configure('bundling');
   GetOptions(
      "h"   => \$opt_h, "help"        => \$opt_h,
      "v"   => \$opt_v, "verbose"     => \$opt_v,
      "c=s" => \$opt_c, "community=s" => \$opt_c, 
      "H=s" => \$opt_H, "host=s"      => \$opt_H, 
   );
   #
   # If the user did not supply a --community= value, use the default.
   #
   if( defined( $opt_c ) ) {
      $community = $opt_c;
   } else {
      $community = $community_default;
   }
   #
   # If the user did not supply a -H or --host== value, generate a warning.
   #
   if( defined( $opt_H ) ) {
      $host = $opt_H;
   } else {
      print "$CHECK_NAME Unknown - cannot determine remote host.  Usage: $0 -H host -c community \n";
      exit $UNKNOWN;				#exit script
   }
   #
   #
   print "   host=$host community=$community \n" if ($verbose eq "yes");
   #
   #
   # If the user supplied -v or --verbose switch, increase script output verbosity for debugging
   if( defined( $opt_v ) ) {
      $verbose = "yes";
   }
}                       #end of subroutine




sub sanity_checks {
   #
   print "running sanity_checks subroutine \n" if ($verbose eq "yes");
   #
   #
   #
   # Confirm required files exist 
   # 
   $snmpget         = "/usr/local/bin/snmpget" if ( -e "/usr/local/bin/snmpget" );
   $snmpget         = "/usr/bin/snmpget"       if ( -e "/usr/bin/snmpget" );
   $snmp_parameters = "-On -r 2 -t 5 -v 1 -c $community $host";
   if ( ! -f "$snmpget" ) {
      print "ERROR: Cannot find $snmpget \n";
      exit;
   }
   if ( ! -x "$snmpget" ) {
      print "ERROR: $snmpget is not executable by the current user\n";
      exit;
   }
   $snmpwalk = "/usr/local/bin/snmpwalk" if ( -e "/usr/local/bin/snmpget" );
   $snmpwalk = "/usr/bin/snmpwalk"       if ( -e "/usr/bin/snmpget" );
   $snmp_parameters = "-On -r 2 -t 5 -v 1 -c $community $host";
   if ( ! -f "$snmpwalk" ) {
      print "ERROR: Cannot find $snmpwalk \n";
      exit;
   }
   if ( ! -x "$snmpwalk" ) {
      print "ERROR: $snmpwalk is not executable by the current user\n";
      exit;
   }
   # 
   #
   #
   # confirm a remote host is defined
   if( ! defined( $host ) ) {
      print "$CHECK_NAME Unknown - missing name of remote host to check.  Use $0 -h for help\n";
      exit $UNKNOWN;                                    #exit script
   }
   #
   #
   #
   # Confirm the remote host is up
   #
   print "trying to ping $host \n" if ($verbose eq "yes");
   open(IN,"ping -c 1 -w 1 $host 2>&1 |");     #send a single ping to the remote host and wait 1 second for a reply
   while (<IN>) {                                  #read a line from STDIN
      if ( /100% packet loss/ ) {                  #check for ping timeouts (indicates host may be down)
         $pingstatus = "$CHECK_NAME UNKNOWN -- no ping reply from $host \n";
         print $pingstatus;                            #print error message
         exit $UNKNOWN;                            #exit script
      }                                            #end of if block
      if ( /NOT FOUND/ ) {                         #check for invalid hostname (using AIX ping)
         $pingstatus = "$CHECK_NAME UNKNOWN -- could not resolve hostname $host \n";
         print $pingstatus;                            #print error message
         exit $UNKNOWN;                            #exit script
      }                                            #end of if block
      if ( /unknown host/ ) {                      #check for invalid hostname (using Linux ping)
         $pingstatus = "$CHECK_NAME UNKNOWN -- could not resolve hostname $host \n";
         print $pingstatus;                            #print error message
         exit $UNKNOWN;                            #exit script
      }                                            #end of if block
      if ( /no route to host/ ) {                  #check for routing problems
         $pingstatus = "$CHECK_NAME UNKNOWN -- could not find a route to $host - check routing tables \n";
         print $pingstatus;                            #print error message
         exit $UNKNOWN;                            #exit script
      }                                            #end of if block
   }                                               #end of while loop
   close IN;                                       #close filehandle
}						#end of subroutine





sub get_usage {
   #
   # this subroutine gets called if user enters -h or --help parameters
   print "running get_usage subroutine \n" if ($verbose eq "yes");
   #
   if( $opt_h ) {
      print "Nagios plugin for determining health of Brocade fibre switch \n";
      print "$0 [options]  \n";
      print "    where options are: \n";
      print "    -c --community=SNMP_community_string     (default=public)\n";
      print "    -h --help \n";
      print "    -H --host=IP|hostname \n";
      print "\n\n";
      exit;
   }                                            #end of if block
}						#end of subroutine







sub get_cmm_health {
   #
   print "running get_cmm_health subroutine \n" if ($verbose eq "yes");
   #
   # this check will return one of four values:  0=critical 2=noncritical error   4=system level error   255=normal
   # the warning range of 255:255 means warn if value is outside the range of 255 to 255
   # the critical range of 1: means critical if value is less than 1
   #
   # snmpget -v 1 -c public mycmm .1.3.6.1.4.1.2.3.51.2.2.7.1.0
   # .1.3.6.1.4.1.2.3.51.2.2.7.1.0 = INTEGER: 255
   #
   $oid = ".1.3.6.1.4.1.2.3.51.2.2.7.1.0"; 
   $cmd = "$snmpget $snmp_parameters $oid 2>&1"; 		#define command to be run
   print "   running command: $cmd \n" if ($verbose eq "yes");
   open(IN,"$cmd |"); 			#open a filehandle for reading 
   while (<IN>) {                          	#read a line from STDIN
      if ( /INTEGER: ([0-9]+)/ ) {  		#look for a response to the snmp query
         $cmm_health = $1;			#assign more mnemonic variable name
      } 					#end of if block
   }						#end of while loop
   close IN;					#close filehandle
   unless ( $cmm_health =~ /[0-9]+/ ) {
      print "$CHECK_NAME CRITICAL -- could not query $host via SNMP.  Confirm you have the correct SNMP community string and the remote host $host has a working SNMP daemon.\n";
      exit $UNKNOWN;				#exit script 
   }						#end of unless block

   print "   cmm_health is $cmm_health (0=critical   2=noncritical error   4=system level error   255=normal) \n" if ($verbose eq "yes");
   #
   # change the value from a number to a human readable value that we can put in the output message
   $cmm_health = "critical"         if ($cmm_health == 0 );
   $cmm_health = "noncritical"      if ($cmm_health == 2 );
   $cmm_health = "systemlevelerror" if ($cmm_health == 2 );
   $cmm_health = "OK"               if ($cmm_health == 255 );
}									#end of subroutine




sub get_ambient_temperature {
   #
   print "running get_ambient_temperature subroutine \n" if ($verbose eq "yes");
   #
   # this check looks at the ambient room temperature as measured by the
   # sensor on the front panel of the Pureflex chassis
   #
   # The OID will contain a value similar to:  24.50 Centigrade
   # So, we will need to strip off the Centigrade portion to do math against the number
   #
   # snmpget -v 1 -c public mycmm .1.3.6.1.4.1.2.3.51.2.2.1.5.1.0
   # .1.3.6.1.4.1.2.3.51.2.2.1.5.1.0 = STRING: "15.70 Centigrade"
   #
   $oid = ".1.3.6.1.4.1.2.3.51.2.2.1.5.1.0"; 
   $cmd = "$snmpget $snmp_parameters $oid 2>&1"; 			#define command to be run
   print "   running command: $cmd \n" if ($verbose eq "yes");
   open(IN,"$cmd |"); 							#open a filehandle for reading 
   while (<IN>) {                          				#read a line from STDIN
      s/"//g;								#get rid of quotation marks
      if ( /STRING: ([0-9\.]+) Centigrade/ ) { 				#look for a response to the snmp query
         $ambient_temp = $1;						#assign more mnemonic variable name
      } 								#end of if block
      if ( /STRING: ([0-9\.]+) Fahrenheit/ ) { 				#look for a response to the snmp query
         $ambient_temp = $1;						#assign more mnemonic variable name
         $ambient_temp = $ambient_temp + 1 if ($ambient_temp == 32);  	#avoid divide by zero error at exactly 32 degrees Fahrenheit
         $ambient_temp = ( ($ambient_temp - 32) * 9 / 5 );		#convert Fahrenheit to Centigrade
      } 								#end of if block
   }									#end of while loop
   close IN;								#close filehandle
   unless ( $ambient_temp =~ /[0-9\.]+/ ) {
      print "$CHECK_NAME CRITICAL -- could not query $host via SNMP.  Confirm you have the correct SNMP community string and the remote host $host has a working SNMP daemon.\n";
      exit $UNKNOWN;							#exit script 
   }									#end of unless block
   $ambient_temp = "unknown" unless ($ambient_temp);			#avoid undef error if no value was retrieved
   print "   ambient temperature is $ambient_temp \n" if ($verbose eq "yes");
}									#end of subroutine




sub get_chassis_serial_number {
   #
   print "running get_chassis_serial_number subroutine \n" if ($verbose eq "yes");
   #
   #
   # snmpwalk -v 1 -c public mycmm 
   #   .1.3.6.1.4.1.2.3.51.2.2.21.1.1.1.0 = STRING: "7893"      <--- model
   #   .1.3.6.1.4.1.2.3.51.2.2.21.1.1.2.0 = STRING: "92X"       <--- model subtype
   #   .1.3.6.1.4.1.2.3.51.2.2.21.1.1.3.0 = STRING: "2122FEA"   <--- serial

   $oid = ".1.3.6.1.4.1.2.3.51.2.2.21.1.1.1.0"; 
   $cmd = "$snmpget $snmp_parameters $oid 2>&1"; 		#define command to be run
   print "   running command: $cmd \n" if ($verbose eq "yes");
   open(IN,"$cmd |"); 		#open a filehandle for reading 
   while (<IN>) {                          	#read a line from STDIN
      s/"//g;					#get rid of quotation marks
      if ( /STRING: ([a-zA-Z0-9\.]+)/ ) {  	#look for a response to the snmp query
         $chassis_model = $1;			#assign more mnemonic variable name
      } 					#end of if block
   }						#end of while loop
   close IN;					#close filehandle
   unless ( $chassis_model =~ /[a-zA-Z0-9]+/ ) {
      print "$CHECK_NAME CRITICAL -- could not query $host via SNMP.  Confirm you have the correct SNMP community string and the remote host $host has a working SNMP daemon.\n";
      exit $UNKNOWN;				#exit script 
   }						#end of unless block

   
   $oid = ".1.3.6.1.4.1.2.3.51.2.2.21.1.1.2.0"; 
   $cmd = "$snmpget $snmp_parameters $oid 2>&1"; 		#define command to be run
   print "   running command: $cmd \n" if ($verbose eq "yes");
   open(IN,"$cmd |"); 				#open a filehandle for reading 
   while (<IN>) {                          	#read a line from STDIN
      s/"//g;					#get rid of quotation marks
      if ( /STRING: ([a-zA-Z0-9]+)/ ) {  	#look for a response to the snmp query
         $chassis_model = "$chassis_model-$1";	#assign more mnemonic variable name
      } 					#end of if block
   }						#end of while loop
   close IN;					#close filehandle
   unless ( $chassis_model =~ /[a-zA-Z0-9]+/ ) {
      print "$CHECK_NAME CRITICAL -- could not query $host via SNMP.  Confirm you have the correct SNMP community string and the remote host $host has a working SNMP daemon.\n";
      exit $UNKNOWN;				#exit script 
   }						#end of unless block

   $oid = ".1.3.6.1.4.1.2.3.51.2.2.21.1.1.3.0"; 
   $cmd = "$snmpget $snmp_parameters $oid 2>&1"; 		#define command to be run
   print "   running command: $cmd \n" if ($verbose eq "yes");
   open(IN,"$cmd |"); 				#open a filehandle for reading 
   while (<IN>) {                          	#read a line from STDIN
      s/"//g;					#get rid of quotation marks
      if ( /STRING: ([a-zA-Z0-9]+)/ ) {  	#look for a response to the snmp query
         $chassis_serial = $1;			#assign more mnemonic variable name
      } 					#end of if block
   }						#end of while loop
   close IN;					#close filehandle
   unless ( $chassis_serial =~ /[a-zA-Z0-9]+/ ) {
      print "$CHECK_NAME CRITICAL -- could not query $host via SNMP.  Confirm you have the correct SNMP community string and the remote host $host has a working SNMP daemon.\n";
      exit $UNKNOWN;				#exit script 
   }						#end of unless block
}									#end of subroutine





sub get_cmm_firmware {
   #
   print "running get_cmm_firmware subroutine \n" if ($verbose eq "yes");
   #
   #
   # snmpwalk -v 1 -c public mycmm 
   #   .1.3.6.1.4.1.2.3.51.2.2.21.3.1.1.2.1 = STRING: "CMM firmware"       <--- primary CMM
   #   .1.3.6.1.4.1.2.3.51.2.2.21.3.1.1.2.2 = STRING: "CMM firmware"       <--- secondary CMM
   #   .1.3.6.1.4.1.2.3.51.2.2.21.3.1.1.3.1 = STRING: "2PET14C"            <--- primary CMM
   #   .1.3.6.1.4.1.2.3.51.2.2.21.3.1.1.3.2 = STRING: "2PET14C"            <--- secondary CMM

   $oid = ".1.3.6.1.4.1.2.3.51.2.2.21.3.1.1.3.1"; 
   $cmd = "$snmpget $snmp_parameters $oid 2>&1"; 		#define command to be run
   print "   running command: $cmd \n" if ($verbose eq "yes");
   open(IN,"$cmd |"); 				#open a filehandle for reading 
   while (<IN>) {                          	#read a line from STDIN
      s/"//g;					#get rid of quotation marks
      if ( /STRING: ([a-zA-Z0-9\.]+)/ ) {  	#look for a response to the snmp query
         $cmm_firmware = $1;			#assign more mnemonic variable name
      } 					#end of if block
   }						#end of while loop
   close IN;					#close filehandle
   unless ( $cmm_firmware =~ /[a-zA-Z0-9\.]+/ ) {
      print "$CHECK_NAME CRITICAL -- could not query $host via SNMP.  Confirm you have the correct SNMP community string and the remote host $host has a working SNMP daemon.\n";
      exit $UNKNOWN;				#exit script 
   }						#end of unless block
}									#end of subroutine



sub get_fan_speeds {
   #
   print "running get_fan_speeds subroutine \n" if ($verbose eq "yes");
   #
   # this check looks at the speed of the chassis fans
   # There are 10 fans in the chassis, so we loop through a 1..10 counter to perform snmpget operations against each OID.
   # It would have been cleaner to do a single snmpwalk and parse out the results, but I could not figure out how.
   #
   # The OID will contain a values similar to the following: 
   #   snmpwalk -v 1 -c public mycmm .1.3.6.1.4.1.2.3.51.2.2.3.50.1.3
   #   .1.3.6.1.4.1.2.3.51.2.2.3.50.1.3.1 = STRING: "46% of maximum"
   #   .1.3.6.1.4.1.2.3.51.2.2.3.50.1.3.2 = STRING: "46% of maximum"
   #   .1.3.6.1.4.1.2.3.51.2.2.3.50.1.3.3 = STRING: "46% of maximum"
   #   .1.3.6.1.4.1.2.3.51.2.2.3.50.1.3.4 = STRING: "46% of maximum"
   #   .1.3.6.1.4.1.2.3.51.2.2.3.50.1.3.5 = STRING: "42% of maximum"
   #   .1.3.6.1.4.1.2.3.51.2.2.3.50.1.3.6 = STRING: "27% of maximum"
   #   .1.3.6.1.4.1.2.3.51.2.2.3.50.1.3.7 = STRING: "27% of maximum"
   #   .1.3.6.1.4.1.2.3.51.2.2.3.50.1.3.8 = STRING: "27% of maximum"
   #   .1.3.6.1.4.1.2.3.51.2.2.3.50.1.3.9 = STRING: "27% of maximum"
   #   .1.3.6.1.4.1.2.3.51.2.2.3.50.1.3.10 = STRING: "42% of maximum"
   #
   # So, we will need to strip off the "% of maximum" portion to do math against the number
   #
   $oid = ".1.3.6.1.4.1.2.3.51.2.2.3.50.1.3"; 		#base OID, there will be .1 .2 .3 .4 .5 .6 .7 .8 .9 .10 sub-keys underneath.
   for ( $count=1 ; $count<=10 ; $count++ ) {		#loop through for values 1 through 10 (number of fans)
      print "   checking fan $count at $oid.$count   " if ($verbose eq "yes");
      $cmd = "$snmpget $snmp_parameters $oid.$count 2>&1"; 		#define command to be run
      print "   running command: $cmd \n" if ($verbose eq "yes");
      open(IN,"$cmd |"); 				#open a filehandle for reading 
      while (<IN>) {                          		#read a line from STDIN
         s/"//g;					#get rid of quotation marks
         if ( /STRING: ([0-9]+)\% of maximum/ ) {  	#look for a response to the snmp query
            $fans{$count}{speed_pct} = $1;   		#save fan speed in hash
            print "   fan $count is rotating at $fans{$count}{speed_pct} \% of maximum \n" if ($verbose eq "yes");
         } 						#end of if block
      }							#end of while loop
      close IN;						#close filehandle
      unless ( $fans{$count}{speed_pct} =~ /[0-9]+/ ) {
         print "$CHECK_NAME CRITICAL -- could not query $host via SNMP.  Confirm you have the correct SNMP community string and the remote host $host has a working SNMP daemon.\n";
         exit $UNKNOWN;					#exit script 
      }							#end of unless block
   }  							#end of for loop
}							#end of subroutine




sub get_power_module_status {
   #
   print "running get_power_module_status \n" if ($verbose eq "yes");
   #
   # this check looks at the status of the power modules
   # There are anywhere between 2 and 6 power modules installed the chassis.
   # It is not required that all 6 power modules be installed, so we need to check to see if they are installed before looking at the health status.
   #
   # It would have been cleaner to do a single snmpwalk and parse out the results, but I could not figure out how.
   #
   # The OID will contain a values similar to the following: 
   #   snmpwalk -v 1 -c public mycmm .1.3.6.1.4.1.2.3.51.2.2.4.1.1.2
   #   .1.3.6.1.4.1.2.3.51.2.2.4.1.1.2.1 = INTEGER: 1     (Power Module installed?  0=notExist, 1=exist)
   #   .1.3.6.1.4.1.2.3.51.2.2.4.1.1.2.2 = INTEGER: 1     (Power Module installed?  0=notExist, 1=exist)
   #   .1.3.6.1.4.1.2.3.51.2.2.4.1.1.2.3 = INTEGER: 1     (Power Module installed?  0=notExist, 1=exist)
   #   .1.3.6.1.4.1.2.3.51.2.2.4.1.1.2.4 = INTEGER: 1     (Power Module installed?  0=notExist, 1=exist)
   #   .1.3.6.1.4.1.2.3.51.2.2.4.1.1.2.5 = INTEGER: 1     (Power Module installed?  0=notExist, 1=exist)
   #   .1.3.6.1.4.1.2.3.51.2.2.4.1.1.2.6 = INTEGER: 1     (Power Module installed?  0=notExist, 1=exist)
   #
   #   snmpwalk -v 1 -c public mycmm .1.3.6.1.4.1.2.3.51.2.2.4.1.1.3
   #   .1.3.6.1.4.1.2.3.51.2.2.4.1.1.3.1 = INTEGER: 1     (Power Module state?  0=unknown, 1=good, 2=warning, 3=notAvailable)
   #   .1.3.6.1.4.1.2.3.51.2.2.4.1.1.3.2 = INTEGER: 1     (Power Module state?  0=unknown, 1=good, 2=warning, 3=notAvailable)
   #   .1.3.6.1.4.1.2.3.51.2.2.4.1.1.3.3 = INTEGER: 1     (Power Module state?  0=unknown, 1=good, 2=warning, 3=notAvailable)
   #   .1.3.6.1.4.1.2.3.51.2.2.4.1.1.3.4 = INTEGER: 1     (Power Module state?  0=unknown, 1=good, 2=warning, 3=notAvailable)
   #   .1.3.6.1.4.1.2.3.51.2.2.4.1.1.3.5 = INTEGER: 1     (Power Module state?  0=unknown, 1=good, 2=warning, 3=notAvailable)
   #   .1.3.6.1.4.1.2.3.51.2.2.4.1.1.3.6 = INTEGER: 1     (Power Module state?  0=unknown, 1=good, 2=warning, 3=notAvailable)
   #
   #   snmpwalk -v 1 -c public mycmm .1.3.6.1.4.1.2.3.51.2.2.4.1.1.4
   #   .1.3.6.1.4.1.2.3.51.2.2.4.1.1.4.1 = STRING: "Power module status OK"
   #   .1.3.6.1.4.1.2.3.51.2.2.4.1.1.4.2 = STRING: "Power module status OK"
   #   .1.3.6.1.4.1.2.3.51.2.2.4.1.1.4.3 = STRING: "Power module status OK"
   #   .1.3.6.1.4.1.2.3.51.2.2.4.1.1.4.4 = STRING: "Power module status OK"
   #   .1.3.6.1.4.1.2.3.51.2.2.4.1.1.4.5 = STRING: "Power module status OK"
   #   .1.3.6.1.4.1.2.3.51.2.2.4.1.1.4.6 = STRING: "Power module status OK"
   #
   #
   # figure out if the power modules are installed
   $oid = ".1.3.6.1.4.1.2.3.51.2.2.4.1.1.2"; 				#base OID, there will be .1 .2 .3 .4 .5 .6 sub-keys underneath.
   for ( $count=1 ; $count<=6 ; $count++ ) {				#loop through for values 1 through 10 (number of fans)
      print "   checking for existence of power module $count at $oid.$count   " if ($verbose eq "yes");
      $cmd = "$snmpget $snmp_parameters $oid.$count 2>&1"; 		#define command to be run
      print "   running command: $cmd \n" if ($verbose eq "yes");
      open(IN,"$cmd |"); 				#open a filehandle for reading 
      while (<IN>) {                          		#read a line from STDIN
         if ( /INTEGER: ([0-9]+)/ ) {  			#look for a response to the snmp query
            $powermodules{$count}{exists} = $1;  	#save power module installation status in hash
            print "   power module $count is $powermodules{$count}{exists} (0=notExist, 1=exist) \n" if ($verbose eq "yes");
         } 						#end of if block
      }							#end of while loop
      close IN;						#close filehandle
      unless ( $powermodules{$count}{exists} =~ /[0-9]+/ ) {

         print "$CHECK_NAME CRITICAL -- could not query $host via SNMP.  Confirm you have the correct SNMP community string and the remote host $host has a working SNMP daemon.\n";
         exit $UNKNOWN;				#exit script 
      }						#end of unless block
      #
      #
      # convert integers to human-readable values
      if ( $powermodules{$count}{exists} eq "0" ) {
         $powermodules{$count}{exists} = "notinstalled";			#change integer to human-readable value
         print "   power module $count is NOT installed \n" if ($verbose eq "yes");
      } elsif ($powermodules{$count}{exists} eq "1" ) {
         $powermodules{$count}{exists} = "installed";			#change integer to human-readable value
         print "   power module $count is installed \n" if ($verbose eq "yes");
      } else {
         $powermodules{$count}{exists} = "unknown";			#this should never happen
         print "   Could not determine power module $count is installed or not \n" if ($verbose eq "yes");
      }
   }  									#end of for loop
   #
   #
   # figure out the state of the power modules
   $oid = ".1.3.6.1.4.1.2.3.51.2.2.4.1.1.3"; 				#base OID, there will be .1 .2 .3 .4 .5 .6 sub-keys underneath.
   for ( $count=1 ; $count<=6 ; $count++ ) {				#loop through for values 1 through 10 (number of fans)
      $powermodules{$count}{state} = "notinstalled" if ($powermodules{$count}{exists} eq "notinstalled");	#avoid undef errors
      next unless ( $powermodules{$count}{exists} eq "installed" );	#skip any power modules that are not installed
      print "   checking state of power module $count at $oid.$count   " if ($verbose eq "yes");
      $cmd = "$snmpget $snmp_parameters $oid.$count 2>&1"; 		#define command to be run
      print "   running command: $cmd \n" if ($verbose eq "yes");
      open(IN,"$cmd |"); 				#open a filehandle for reading 
      while (<IN>) {                          		#read a line from STDIN
         if ( /INTEGER: ([0-9]+)/ ) {  			#look for a response to the snmp query
            $powermodules{$count}{state} = $1;  	#save power module installation status in hash
            print "   power module $count state is $powermodules{$count}{state} (0=unknown, 1=good, 2=warning, 3=notAvailable) \n" if ($verbose eq "yes");
         } 						#end of if block
      }							#end of while loop
      close IN;						#close filehandle
      unless ( $powermodules{$count}{state} =~ /[0-9]+/ ) {

         print "$CHECK_NAME CRITICAL -- could not query $host via SNMP.  Confirm you have the correct SNMP community string and the remote host $host has a working SNMP daemon.\n";
         exit $UNKNOWN;				#exit script 
      }						#end of unless block
      #
      #
      # convert integers to human-readable values
      if ( $powermodules{$count}{state} eq "0" ) {
         $powermodules{$count}{state} = "unknown";			#change integer to human-readable value
         print "   state of power module $count is $powermodules{$count}{state} \n" if ($verbose eq "yes");
      } elsif ($powermodules{$count}{state} eq "1" ) {
         $powermodules{$count}{state} = "good";			#change integer to human-readable value
         print "   state of power module $count is $powermodules{$count}{state} \n" if ($verbose eq "yes");
      } elsif ($powermodules{$count}{state} eq "2" ) {
         $powermodules{$count}{state} = "warning";			#change integer to human-readable value
         print "   state of power module $count is $powermodules{$count}{state} \n" if ($verbose eq "yes");
      } elsif ($powermodules{$count}{state} eq "3" ) {
         $powermodules{$count}{state} = "notAvailable";			#change integer to human-readable value
         print "   state of power module $count is $powermodules{$count}{state} \n" if ($verbose eq "yes");
      } else {
         $powermodules{$count}{state} = "unknown";			#this should never happen
      }
   }  									#end of for loop
}									#end of subroutine










sub print_output {
   #
   print "running print_output subroutine \n" if ($verbose eq "yes");
   #
   #
   # build an output message that contains all the information
   $output_message = "CMM_status:$cmm_health Ambient_temperature:${ambient_temp}C ";
   foreach $key (sort keys %fans) {
      $output_message = "$output_message fan${key}:$fans{$key}{speed_pct}\%";
   } 						#end of foreach block
   foreach $key (sort keys %powermodules) {
      $output_message = "$output_message PowerModule${key}:$powermodules{$key}{state}";
   } 						#end of foreach block
   $output_message = "$output_message ChassisModel:$chassis_model ChassisSerial:$chassis_serial CMM_firmware:$cmm_firmware";
   #
   #
   # check to see if temperature is outside normal ranges  (all numbers are in Centigrade because Fahrenheit is silly)
   if ( $ambient_temp > 30 ) {					#look for specific error
      $output_message = "Ambient temperature is $ambient_temp degrees C. The air conditioning may have failed. Consider shutting down hardware now. $output_message\n";
      print "$CHECK_NAME CRITICAL - $output_message \n";
      exit $CRITICAL;				#exit script
   }									#end of if block
   if ( $ambient_temp > 28 ) {					#look for specific error
      $output_message = "Ambient temperature is $ambient_temp degrees C. The air conditioning may have failed. Consider shutting down hardware now. $output_message\n";
      print "$CHECK_NAME WARN - $output_message \n";
      exit $WARN;				#exit script
   }									#end of if block
   if ( $ambient_temp < 10 ) {					#look for specific error
      $output_message = "Ambient temperature is $ambient_temp degrees C. That seems unreasonably cold.  Pleae check the air conditioning. $output_message\n";
      print "$CHECK_NAME WARN - $output_message \n";
      exit $WARN;				#exit script
   }									#end of if block
   #
   #
   # check to see if any fans are running faster than 90% or slower than 10% of their maximum speed
   foreach $key (sort keys %fans) {
      if ( $fans{$key}{speed_pct} > 90 ) {
         $output_message = "Fan $key is running at $fans{$key}{speed_pct}\%, which seems unusually high.  Please check fan status and ambient temperature. $output_message\n";
         print "$CHECK_NAME WARN - $output_message \n";
         exit $WARN;				#exit script
      }
      if ( $fans{$key}{speed_pct} < 10 ) {
         $output_message = "Fan $key is running at $fans{$key}{speed_pct}\%, which seems unusually low.  Please check fan status and ambient temperature. $output_message\n";
         print "$CHECK_NAME WARN - $output_message \n";
         exit $WARN;				#exit script
      }
   } 						#end of foreach block
   #
   #
   # check to see if any power modules have problems
   foreach $key (sort keys %powermodules) {
      next if ( $powermodules{$key}{exists} eq "notinstalled" );	#skip power modules that are not installed
      unless ( $powermodules{$key}{state} eq "good" ) {
         $output_message = "Power module $key state is $powermodules{$key}{state}.  Please investigate.   $output_message\n";
         print "$CHECK_NAME WARN - $output_message \n";
         exit $WARN;				#exit script
      }
   } 						#end of foreach block
   #
   #
   # check the CMM health status
   if ( $cmm_health eq "critical" ) {					#look for specific error
      $output_message = "Chassis management module has a critical error.   $output_message\n";
      print "$CHECK_NAME CRITICAL - $output_message \n";
      exit $CRITICAL;							#exit script
   }									#end of if block
   if ( $cmm_health eq "noncritical" ) {				#look for specific error
      $output_message = "Chassis management module has a noncritical error.   $output_message\n";
      print "$CHECK_NAME WARN - $output_message \n";
      exit $WARN;							#exit script
   }									#end of if block
   if ( $cmm_health eq "systemlevelerror" ) {				#look for specific error
      $output_message = "Chassis management module has a system level error.   $output_message\n";
      print "$CHECK_NAME WARN - $output_message \n";
      exit $WARN;							#exit script
   }									#end of if block
   #
   #
   #
   #
   #
   #
   # we only get this far if everything is ok
   print "$CHECK_NAME OK - $output_message \n";
   exit $OK;
}						#end of subroutine






# ----------------------- main body of program -------------------------------
get_options;
sanity_checks;
get_usage;
get_cmm_health;
get_ambient_temperature;
get_chassis_serial_number;
get_cmm_firmware;
get_fan_speeds;
get_power_module_status;
print_output;

